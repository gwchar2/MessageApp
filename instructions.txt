Server action:

1) Reads port from myport.info
2) Waits an infinite time for requests (thread, nonstop, until connection dies from client)
3) Responses to requests:
    1. Request to Sign up : If username already exists, server returns error.
                            else, the server will make a new UUID for user, and remember the information in system and return success message.
    2. Request for Client List: The client will return the client list according to the protocol.
    3. Request to send message: The server will extract the data and type of message, and remember it in the memory.
    4. Request for 'waiting list' (waiting messages) : The server will grab the unseen waiting messages from the memory, and send to user. When such a message is sent, it is deleted afterwords!!!


Client action:
1) Reads server and port from server.info
2) Saves and reads his Username + UUID + Encryption Key from file my.info
3) Client shows user the following option in console and waits for actions :
    -- If there is error from server, there will be a message : "Server responded with an error" and client will wait for next user input.
4) Shows the user terminal, where user can choose his next action.
User Terminal:
    1) Request 110 - Register user: Will receive username from user input & send request for new UUID. Will save information in me.info (username,uuid NOT LIKE MY.INFO!!!!!). 
                                    If the file already exists, not allowed to register new user !!!!! Will return error.
    2) Request 120 - Request for user list from server. Will print the response to screen (Name of users).
    3) Request 130 - Request public key.
    4) Request 140 - Request for waiting messages.  Will be printed to screen in certain way.
    5) Request 150 - Receives END POINT USER USERNAME (למי ששולחים) from terminal. Receives text message to send. Sends message request to specific user. 
    6) Request 151 - Receives END POINT USER USERNAME (למי ששולחים) from terminal. Request for symmetric key stored in server.
    7) Request 152 - Receives END POINT USER USERNAME (למי ששולחים) from terminal. Client will make symmetric key. Will keep it in memory for target user, and send a request to keep it on server as well. 



Every first time user signs up with username (max 255 bytes) and transfers public key.
The server will than return to user his UUID or an error if username already exists in database.


Requests from server:
    1. client can request the file of all other users.
    2. client can request public key of certain user.
    3. client can request all his "waiting" messages.
    4. client can send a message to another user.


User A requests User B's public key from the server. 
User B reads the request and sends their public key to A. 
User A encrypts a request (asking for a symmetric key) using B’s public key. 
User B decrypts the request using their private key. 
User B requests User A’s public key from the server.
User B generates a symmetric key and encrypts it with A’s public key. 
User B sends the encrypted symmetric key to A. 
User A decrypts it with their private key. 
Now A & B both hold the symmetric key. 


Requests from client to server:
Has specific header - check file.

Request 600 - sign up
Request 601 - members list 
Request 602 - specific client public key
Request 603 - Sending message to user.
Request 604 - Pull waiting messages.

User can send different message types to other users: (603)
    Type 1 - symmetric key request.
    Type 2 - sending user B my own symmetric key.
    Type 3 - text message
    Type 4 - file (bonus)

Responses from server:
Has specific header, of course.
Response 2100 - Sign up successfull
Response 2101 - User list
Response 2102 - Public key
Response 2103 - Message to user was sent succesfully (kept on server, not necessarily read)
Response 2104 - Pull "waiting messages"
Response 9000 - General error




Encryption:
Symetric - AES-CBC protocol. Key length: 128 bit.
Asymmetric - RSA protocol. Key length 1024 bit (Without the header). With header, it is 1280.

